@model ModelLayer.Models.ReferAndEarnSchema

@{
    ViewBag.Title = "Edit";
}
<div class="row-fluid" style="margin-top:20px;margin-left:15px;">
    <div class="box span12">
        <div class="box-header">
            <h2><i class="icon-edit"></i><span class="break"></span>Edit</h2>
        </div>
        <div class="box-content">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <span id="errorMsg" style="color:red"></span> @*////added*@
                    @Html.ValidationSummary(true)
                    @Html.HiddenFor(model => model.ID)

                    <div class="control-group">
                        <label class="control-label">City</label>
                        <div class="controls">
                            @Html.DropDownList("CityID", null, "Select City", new { @class = "form-control", required = "required",disable="disable" })
                            @Html.ValidationMessageFor(model => model.CityID)
                        </div>
                    </div>
                    @*<div class="control-group">
                        <label class="control-label">MCO</label>
                        <div class="controls">
                            <select class="select select1" id="ddlSelectArea" name="FranchiseID" style="width: 100%;"></select>
                            @Html.ValidationMessageFor(model => model.FranchiseID) 
                        </div>
                    </div>*@
                    <div class="form-group">
                        @Html.LabelFor(model => model.Franchise.ContactPerson, "Franchise", new { @class = "control-label col-md-2" }) @*////added*@
                        <div class="col-md-10">
                            @Html.DropDownList("FranchiseID", "Select Franchise")
                            @*@Html.ValidationMessageFor(model => model.FranchiseID)*@
                            @Html.ValidationMessageFor(model => model.Franchise.ContactPerson)
                        </div>
                    </div>

                    <div class="control-group">
                        <label class="control-label">Scheme Name</label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.Name, new { required = "required" })
                            @Html.ValidationMessageFor(model => model.Name)
                        </div>
                    </div>

                    <div class="control-group">
                        <label class="control-label">Order Wise Earn</label>
                        <div class="controls">
                            @Html.EditorFor(model => model.OrderwiseEarn)
                            @Html.ValidationMessageFor(model => model.OrderwiseEarn)
                        </div>
                    </div>

                    <div class="control-group">
                        <label class="control-label">User Wise Earn</label>
                        <div class="controls">
                            @Html.EditorFor(model => model.UserwiseEarn)
                            @Html.ValidationMessageFor(model => model.UserwiseEarn)
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="controls">
                            @Html.RadioButton("rbtIsRupee", "EarnInRs", Model.EarnInRS != null ? true : false) Earn In Rupees
                            @Html.RadioButton("rbtIsRupee", "EarnInPerc", Model.EarnInPercentage != null ? true : false) Earn In Percent
                        </div>
                    </div>
                    <div class="control-group">
                        <label class="control-label">Earn In Rs</label>
                        <div class="controls">
                            @if (Model.EarnInRS != null && Model.EarnInRS.ToString() != string.Empty)
                            {
                                @Html.TextBoxFor(model => model.EarnInRS, new { required = "required" })
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.EarnInRS, new { disabled = "disabled", required = "required" })
                            }
                            @Html.HiddenFor(model => model.EarnInRS, new { id = "hdnEarnInRs" })
                            @Html.ValidationMessageFor(model => model.EarnInRS)
                        </div>
                    </div>


                    <div class="control-group">
                        <label class="control-label">Earn In Percentage</label>
                        <div class="controls">
                            @if (Model.EarnInPercentage != null && Model.EarnInPercentage.ToString() != string.Empty)
                            {
                                @Html.TextBoxFor(model => model.EarnInPercentage, new { required = "required" })
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.EarnInPercentage, new { disabled = "disabled", required = "required"  })
                            }
                            @Html.HiddenFor(model => model.EarnInPercentage, new { id = "hdnEarnInPerce" })
                            @Html.ValidationMessageFor(model => model.EarnInPercentage)
                        </div>
                    </div>

                    @*<div class="control-group">
                        <label class="control-label">Max No Of Orders</label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.MaxNoOfOrders, new { required = "required" })
                            @Html.ValidationMessageFor(model => model.MaxNoOfOrders)
                        </div>
                    </div>*@

                    <div class="control-group">
                        <label class="control-label">Minimum Purchase Amount</label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.MaxPurchaseAmount, new { required = "required" })
                            @Html.ValidationMessageFor(model => model.MaxPurchaseAmount)
                        </div>
                    </div>

                   

                    <div class="control-group">
                        <label class="control-label">IsActive</label>
                        <div class="controls">
                            @Html.EditorFor(model => model.IsActive)
                            @Html.ValidationMessageFor(model => model.IsActive)
                        </div>
                    </div>

                    @*<div class="form-group">
                            @Html.LabelFor(model => model.CreateDate, new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.CreateDate)
                                @Html.ValidationMessageFor(model => model.CreateDate)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.CreateBy, new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.CreateBy)
                                @Html.ValidationMessageFor(model => model.CreateBy)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ModifyDate, new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ModifyDate)
                                @Html.ValidationMessageFor(model => model.ModifyDate)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ModifyBy, new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ModifyBy)
                                @Html.ValidationMessageFor(model => model.ModifyBy)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.NetworkIP, new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.NetworkIP)
                                @Html.ValidationMessageFor(model => model.NetworkIP)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DeviceType, new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.DeviceType)
                                @Html.ValidationMessageFor(model => model.DeviceType)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DeviceID, new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.DeviceID)
                                @Html.ValidationMessageFor(model => model.DeviceID)
                            </div>
                        </div>*@

                    <div class="form-actions">
                        <input type="submit" value="Save" class="btn btn-success" />
                        @Html.ActionLink("Back to List", "Index", null, new { @class = "btn" })
                    </div>
                </div>
            }

        </div>
    </div>
</div>
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script type="text/javascript">

    $(document).ready(function () {
        $('input[type=radio][name=rbtIsRupee]').change(function () {
            if (this.value == 'EarnInRs') {
                $("#EarnInPercentage").attr("disabled", "disabled");
                $("#EarnInRS").removeAttr("disabled");
                $("#EarnInPercentage").val(" ");
                $("#EarnInRS").val($("#hdnEarnInRs").val());
            }
            else if (this.value == 'EarnInPerc') {
                $("#EarnInRS").val(0);
                $("#EarnInRS").trigger("change");
                $("#EarnInPercentage").val($("#hdnEarnInPerce").val());
                $("#EarnInRS").attr("disabled", "disabled");
                $("#EarnInPercentage").removeAttr("disabled")

            }
        });


        $("#btnCreate").click(function () {
            if ($('#divMain').find('input[type=checkbox]:checked').length == 0) {
                $("#errorMsg").html("Please select atleast one checkbox");
                return false;
            }
            else if ($("#FranchiseID").val() == 0) { ////added
                $("#errorMsg").html("Please select Franchise.");
                return false;
            }
        });

        $("#CityID").change(function () {
            var selectedVal = $("#CityID option:selected").val();
            if (selectedVal > 0) {

                $.ajax({
                    type: "POST",
                    url: "/ReferAndEarnSchema/getFranchise",
                    data: "{ CityID: '" + selectedVal + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    async: true,
                    cache: false,
                    success: function (msg) {

                        $('#FranchiseID').empty();
                        $('#FranchiseID').append('<option value=0>Select Franchise</option>');
                        $.each(msg, function (index, item) {
                            $('#FranchiseID').append('<option value=' + item.value + '>' + item.text + '</option>');
                        });
                    },
                    error: function (x, e) {
                        //alert("The call to the server side failed. " + x.responseText);
                    }
                });

            }
        });




    });

</script>
