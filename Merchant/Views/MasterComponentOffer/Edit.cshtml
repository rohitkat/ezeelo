@model ModelLayer.Models.ComponentOffer

@{
    ViewBag.Title = "Edit";
}

@*<h2>Edit</h2>*@
<div class="span10" id="content">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()


        <div class="row-fluid sortable ui-sortable">
            <div class="box span12">
                <div class="box-header">
                    <h2><i class="icon-edit"></i><span class="break"></span>Edit</h2>

                </div>
                <div class="box-content">
                    <form class="form-horizontal">
                        <h4>ComponentOffer</h4>
                        <hr />
                        @Html.ValidationSummary(true)
                        @Html.HiddenFor(model => model.ID)

                        <div class="control-group">
                            @Html.LabelFor(model => model.ComponentID, "Component Name", new { @class = "control-label span2" })
                            <div class="">
                                @Html.DropDownList("ComponentID", null, String.Empty, new { @disabled = "disabled" })
                                @Html.ValidationMessageFor(model => model.ComponentID)
                            </div>
                        </div>


                        <div class="control-group">
                            @Html.LabelFor(model => model.ShortName, "Offer Name", new { @class = "control-label span2" })
                            <div class="">
                                @Html.EditorFor(model => model.ShortName)
                                @Html.ValidationMessageFor(model => model.ShortName)
                            </div>
                        </div>

                        <div class="control-group">
                            @Html.LabelFor(model => model.OfferInRs, "Offer In Rs", new { @class = "control-label span2" })
                            <div class="">
                                @Html.EditorFor(model => model.OfferInRs)
                                @Html.ValidationMessageFor(model => model.OfferInRs)
                            </div>
                        </div>

                        <div class="control-group">
                            @Html.LabelFor(model => model.OfferInPercent, "Offer In Percent", new { @class = "control-label span2" })
                            <div class="">
                                @Html.EditorFor(model => model.OfferInPercent)
                                @Html.ValidationMessageFor(model => model.OfferInPercent)
                            </div>
                        </div>

                        <div class="control-group">
                            @Html.LabelFor(model => model.Description, new { @class = "control-label span2" })
                            <div class="">
                                @Html.EditorFor(model => model.Description)
                                @Html.ValidationMessageFor(model => model.Description)
                            </div>
                        </div>

                        <div class="control-group">
                            @Html.LabelFor(model => model.IsActive, new { @class = "control-label span2" })
                            <div class="">
                                @Html.EditorFor(model => model.IsActive)
                                @Html.ValidationMessageFor(model => model.IsActive)
                            </div>
                        </div>


                        <div class="form-actions">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Save" class="btn btn-Ifrm-submit1 dollr" onclick="return Validate();" />
                                @Html.ActionLink("Back to List", "Index", string.Empty, new { @class = "btn btn-brown" })
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

    }
</div>

@*<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@
<script>
    function Validate() {

        if (($('#OfferInRs:input').val() == 0 || $('#OfferInRs:input').val() == "") && ($('#OfferInPercent:input').val() == 0 || $('#OfferInPercent:input').val() == "")) {
            alert('Please fill value 0 or greater than 0 in Rs Or Percent field.');
            return false;
        }
        else if ($('#OfferInRs:input').val() > 0 && $('#OfferInPercent:input').val() == "") {
            alert('Please fill value 0 in Percent field.');
            return false;
        }
        else if ($('#OfferInRs:input').val() == "" && $('#OfferInPercent:input').val() > 0) {
            alert('Please fill value 0 in Rs field.');
            return false;
        }
        else if ($('#OfferInRs:input').val() == "" || $('#OfferInPercent:input').val() == "") {
            alert('Please fill value 0 or greater than 0 in Rs Or Percent field.');
            return false;
        }
        else if ($('#OfferInRs:input').val() > 0 && $('#OfferInPercent:input').val() > 0) {
            alert('You can not fill value greater than 0 in both Rs and Percent Field.');
            return false;

        }


    }
</script>