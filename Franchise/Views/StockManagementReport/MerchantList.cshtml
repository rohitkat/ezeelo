@model IEnumerable<ModelLayer.Models.ViewModel.ShopViewModel>
@{
    ViewBag.Title = "Shop List";
}
<style>
    #tblMerchantList tbody td a {
        text-decoration: underline;
    }

    .center {
        margin-left: 0px !important;
    }

    .pagination {
        margin: 0px 0;
    }
</style>
@using (Html.BeginForm())
{
    <div class="row-fluid" style="width: 99%; margin-top: 20px; margin-left: 10px;">
        <div class="box span12">
            <div class="box-header">
                <h2>Shop List </h2>

            </div>
            <div class="box-content">
                <div class="row-fluid">
                    <div class="div_class">
                        @*<div class="search_div">
                                <input type="text" class="search_input" placeholder="Search..." />
                                <a class="clearlink" title="Clear textbox"></a>
                            </div>*@
                        <div style="min-height: 400px; max-height: 500px; overflow-y: scroll;">
                            <table class="table table-striped table-bordered bootstrap-datatable datatable dataTable" id="tblMerchantList">
                                <thead>
                                    <tr>

                                        @*<th>
                                                @Html.DisplayNameFor(model => model.ID)
                                            </th>*@
                                        <th>
                                            Shops
                                        </th>
                                        @*<th>
                                                Non-Approved Product Count
                                            </th>*@
                                        @*<th></th>*@
                                    </tr>
                                </thead>
                                @{
    List<long> qty = new List<long>();

    var ShopId = Model.Select(s => new { s.ID, s.Name }).Distinct().OrderBy(s => s.Name).ToList();

    foreach (var item in ShopId)
    {
        var flag = false;
        var Quantity = Model.Where(x => x.ID == item.ID).Select(q => q.NonApproveProductCount).ToList();
        if (Quantity.Contains(0))
        {
            flag = true;
        }
        if (!string.IsNullOrEmpty(item.Name))       //condition added by snehal on 30/5/2016 for nullable shop name field
        {
            <tr>
                @if (flag == true)
                {

                    <td>@Html.ActionLink(item.Name, "GetView", "StockManagementReport", new { shopId = item.ID, shopName = item.Name }, new { @style = "color:Red" })</td>

                }
                else
                {
                    <td>@Html.ActionLink(item.Name, "GetView", "StockManagementReport", new { shopId = item.ID, shopName = item.Name }, null)</td>
                }
            </tr>
        }
    }

                                }


                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@*if (!string.IsNullOrEmpty(item.Name))//&& item.NonApproveProductCount > 0
    {


        if (qty.Contains(0))
        {

        }
        <tr>
            @*<td>@Html.DisplayFor(modelItem => item.ID)</td>*@
@*<td>@Html.DisplayFor(modelItem => item.Name)</td>*@
@*@if (item.NonApproveProductCount == 0)
    {
        <td>@Html.ActionLink(item.Name, "GetView", "StockManagementReport", new { shopId = item.ID }, new { @style = "color:Red" })</td>
    }
    else
    {*@
@*<td>@Html.ActionLink(item.Name, "GetView", "StockManagementReport", new { shopId = item.ID }, null)</td>*@
@*}*@
@*<td>@Html.DisplayFor(modelItem => item.NonApproveProductCount)</td>*@
@*</tr>*@